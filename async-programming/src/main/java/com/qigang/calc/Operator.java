package com.qigang.calc;

public class Operator {
    public static void main(String[] args) {
        //与运算 &  规则 ：都为1时才为1
        System.out.println( 7 & 9);
        /*
         *  7二进制 0111
         *  9二进制 1001
         * -----------
         *        0001   ==1
         * */

        //或运算 | 规则：有一个为1，则为1
        System.out.println(7 | 9);
        /*
         * 7二进制 0111
         * 9二进制 1001
         * ----------
         *      1111 == 15
         * */

        //异或运算  ^ 规则：不同为1
        System.out.println( 7 ^ 9);
        /*
         * 7二进制 0111
         * 9二进制 1001
         * ----------
         *      1110 == 14
         *
         * */


        //取反运算(计算机存储的是补码，取反其实是针对补码进行取反)
        //http://blog.csdn.net/poxu1234/article/details/62422231
        //原码,反码,补码
        //补码=反码+1
        //补码的补码是原码

        //取反运算 ~ 规则：按位取反
        System.out.println( ~7);
        /*
         * 7二进制         0000 0000 0000 0000 0000 0000 0000 0111
         * 7的补码是本身   0000 0000 0000 0000 0000 0000 0000 0111  正数的补码和反码都是本身
         * 取反操作        1111 1111 1111 1111 1111 1111 1111 1000  取反之后变成负数了，负数的补码=符号位不动，其他位取反+1，也就是反码+1
         * 补码的补码      1000 0000 0000 0000 0000 0000 0000 1000  得到-8
         *
         * */
        System.out.println(~-7);
        /*
         * -7二进制        1000 0000 0000 0000 0000 0000 0000 0111
         * -7的补码        1111 1111 1111 1111 1111 1111 1111 1001  负数的反码=符号位不动，其他位取反；负数的补码=符号位不动，其他位取反+1，也就是反码+1
         * 取反操作        0000 0000 0000 0000 0000 0000 0000 0110
         * 补码的补码      0000 0000 0000 0000 0000 0000 0000 0110 得到6
         *
         * */


        /**
         * 位运算
         * https://www.cnblogs.com/WJ-163/p/5549854.html
         */
        int number = 10;
        //原始数二进制
        System.out.println(number);
        number = number << 1;
        //左移一位
        System.out.println(number);
        number = number >> 1;
        //右移一位
        System.out.println(number);
    }
}
